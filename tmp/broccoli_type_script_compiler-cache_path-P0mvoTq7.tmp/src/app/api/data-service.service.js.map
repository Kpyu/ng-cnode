{"version":3,"file":"data-service.service.js","sourceRoot":"","sources":["../../Users/kpyu/github/ng-noder/tmp/broccoli_type_script_compiler-input_base_path-QC4a4osO.tmp/0/src/app/api/data-service.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAAyB,eAAe,CAAC,CAAA;AACzC,QAAO,6BAA6B,CAAC,CAAA;AAGrC;IAEE,4BAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QADtB,WAAM,GAAU,6BAA6B,CAAC,CAAE,iBAAiB;IACvC,CAAC;IAEnC,wCAAW,GAAX,UAAY,KAAK;QACf,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;IACD,yCAAY,GAAZ,UAAa,MAAU;QACrB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAI,IAAI,CAAC,MAAM,oBAAe,MAAM,CAAC,IAAI,uBAClD,MAAM,CAAC,KAAK,aAAQ,MAAM,CAAC,GAAG,kBAAa,MAAM,CAAC,QAAU,CAAC,CAAC,SAAS,EAAE,CAAC;IACvF,CAAC;IACD,qCAAQ,GAAR;IAEA,CAAC;IACD,qCAAQ,GAAR;IAEA,CAAC;IACD,yCAAY,GAAZ;IAEA,CAAC;IACD,2CAAc,GAAd;IAEA,CAAC;IACD,2CAAc,GAAd;IAEA,CAAC;IACD,qCAAQ,GAAR;IAEA,CAAC;IACD,gCAAG,GAAH;IAEA,CAAC;IACD,wCAAW,GAAX;IAEA,CAAC;IACD,gDAAmB,GAAnB;IAEA,CAAC;IACD,uCAAU,GAAV;IAEA,CAAC;IACD,wCAAW,GAAX,UAAY,WAAkB;QAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAI,IAAI,CAAC,MAAM,kCAA6B,WAAa,CAAC;aAC3E,SAAS,EAAE,CAAA;IAChB,CAAC;IACD,oCAAO,GAAP;IAEA,CAAC;IAhDH;QAAC,iBAAU,EAAE;;0BAAA;IAiDb,yBAAC;AAAD,CAAC,AAhDD,IAgDC;AAhDY,0BAAkB,qBAgD9B,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http }     from '@angular/http';\nimport 'rxjs/add/operator/toPromise';\n\n@Injectable()\nexport class DataServiceService {\n  private apiUrl:string = 'https://cnodejs.org/api/v1/';  // URL to web api\n  constructor(private http: Http) { }\n\n  handleError(error) {\n    console.error(error);\n  }\n  getTopicList(params:any): Promise<any>{\n    return this.http.get(`${this.apiUrl}topics?page=${params.page}\n      &limit=${params.limit}&tab=${params.tab}&mdrender=${params.mdrender}`).toPromise();\n  }\n  getTopic() {\n\n  }\n  newTopic() {\n\n  }\n  topicCollect() {\n\n  }\n  topicDeCollect() {\n\n  }\n  getUserCollect() {\n\n  }\n  newReply() {\n\n  }\n  ups() {\n\n  }\n  getUserInfo() {\n\n  }\n  validateAccessToken() {\n\n  }\n  getMessage() {\n\n  }\n  unreadCount(accesstoken:string): Promise<any> {\n    return this.http.get(`${this.apiUrl}message/count?accesstoken=${accesstoken}`)\n      .toPromise()\n  }\n  markAll() {\n  \n  }\n}\n"]}